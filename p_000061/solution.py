#! /usr/bin/env python3

"""
Problem 61: Cyclical Figurate Numbers
=====================================

Link: https://projecteuler.net/problem=61

Description
===========

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the
following formulae:

Triangle     P[3, n] = n(n + 1)/2       1, 3, 6, 10, 15, ...
Square       P[3, n] = nÂ²               1, 4, 9, 16, 25, ...
Pentagonal   P[3, n] = n(3n - 1)/2      1, 5, 12, 22, 35, ...
Hexagonal    P[3, n] = n(2n-1)          1, 6, 15, 28, 45, ...
Heptagonal   P[3, n] = n(5n-3)/2        1, 7, 18, 34, 55, ...
Octagonal    P[3, n] = n(3n-2)          1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number
   (including the last number with the first).
2. Each polygonal type: triangle (P[3,127] - 8128), square (P[4, 91]=8281) and pentagonal (P[5,44]=2882), is represented by a different number
   in the set.
3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal,
heptagonal, and octagonal, is represented by a different number in the set.
"""

import itertools


def generate_figurate_numbers(delta: int):
    # delta==0 generates 1, 2, 3, 4, 5, ... (positive integers)
    # delta==1 generates 1, 3, 6, 10, 15, ... (triangle numbers)
    # delta==2 generates 1, 4, 9, 16, 25, ... (square numbers)
    # delta==3 generates 1, 5, 12, 22, 35, ... (pentagonal numbers)
    # delta==4 generates 1, 6, 15, 28, 45, ... (hexagonal numbers)
    # delta==5 generates 1, 7, 18, 34, 55, ... (heptagonal numbers)
    # delta==6 generates 1, 8, 21, 40, 65, ... (octagonal numbers)
    n = 1
    p = 0
    while True:
        p += n
        n += delta
        yield p

def generate_solutions(candidates, route, visited):
    if len(route) == 6:
        if route[0][0] == route[5][1]:
            yield(route)
    else:
        for ((src, dst), figurates) in candidates.items():
            if len(route) == 0 or ((src, dst) >= route[0] and route[-1][1] == src):
                for figurate in figurates:
                    if figurate not in visited:
                        yield from generate_solutions(candidates, route + [(src, dst)], visited | set([figurate]))

def solve() -> int:
    candidates = {}
    for k in (3, 4, 5, 6, 7, 8):
        for f in generate_figurate_numbers(k - 2):
            if f >= 10000:
                break
            if f >= 1000:
                key = (f // 100, f % 100)
                if key not in candidates:
                    candidates[key] = []
                candidates[key].append(k)

    solutions = list(generate_solutions(candidates, [], set()))
    assert len(solutions) == 1
    solution = solutions[0]
    solution = [x[0]*100 + x[1] for x in solution]
    return sum(solution)

def main():
    solution = solve()
    print("solution:", solution)

if __name__ == "__main__":
    main()
